#!/usr/sbin/expect -f
#
# This Expect script was generated by autoexpect on Thu Jun 15 13:22:59 2017
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn sh MEGAN_Community_unix_6_8_12.sh
match_max 100000
expect -exact ""
send -- "o\r"
expect -exact ""
send -- "1\r"
expect -exact ""
send -- "\r"
expect -exact ""
send -- "1,3\r"
expect -exact ""
send -- "y\r"
expect -exact ""
send -- "\r"
expect -exact ""
send -- "5\r"
expect -exact ""
send -- "\r"
expect -exact ""
send -- "n\r"
expect eof

# Starting Installer ...
# This will install MEGAN Community Edition on your computer.
# OK [o, Enter], Cancel [c]
# o
# Please read the following License Agreement. You must accept the terms of this agreement before continuing with the installation.
#
# MEGAN Community Edition - Metagenome analysis software
#
# Copyright (c) 2017, Daniel H. Huson
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# For more details, see
# http://www-ab.informatik.uni-tuebingen.de/software/megan6
#
# I accept the agreement
# Yes [1], No [2]
# 1
# Where should MEGAN Community Edition be installed?
# [/usr/local/megan]
#
# Which components should be installed?
# 1: MEGAN
# 2: Manual
# 3: tools
# Please enter a comma-separated list of the selected values or [Enter] for the default selection:
# [1,2,3]
# 1,3
# Create symlinks?
# Yes [y, Enter], No [n]
# y
# Select the folder where you would like MEGAN Community Edition to create symlinks, then click Next.
# [/usr/local/bin]
#
# Extracting files ...
#
# Check for updates how often?
# Check for updates:
# On every start [1]
# Daily [2]
# Weekly [3]
# Monthly [4]
# Never [5, Enter]
# 5
# Set maximum allowed memory usage for MEGAN
# Set max memory usage (in megabytes) [800-512000]
# [2000]
#
# Setup has finished installing MEGAN Community Edition on your computer.
# Run MEGAN Community Edition?
# Yes [y, Enter], No [n]
# n
# Finishing installation ...
